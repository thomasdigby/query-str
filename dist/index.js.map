{"version":3,"file":"index.js","sources":["../index.js"],"sourcesContent":["/**\n * Casts a given parameter value to it's associated type.\n *\n * @param {string} param - The query parameter's value\n * @returns {any} - Interpreted parameter value\n */\nconst parseParam = (param) => {\n  // cast to boolean\n  if (/^true|false$/.test(param)) {\n    return param === 'true';\n  // cast to number\n  } else if (!isNaN(param)) {\n    return param.includes('.') ? parseFloat(param) : parseInt(param, 10);\n  }\n  // cast to string\n  return `\"${decodeURIComponent(param)}\"`;\n};\n\n/**\n * Parses given url's query string's parameters.\n *\n * @param {string} url - The URL to be parsed.\n * @returns {object} - The parsed parameters\n */\nconst parse = (url) => {\n  // extract query string parameters from url\n  let params = (url.split('?')[1] || url.split('?')[0]).split('&');\n  // cast parameters to type\n  params = params.map((param) => {\n    const props = param.split('=');\n    return `\"${props[0]}\":${parseParam(props[1]) || 'undefined'}`;\n  }).join(',');\n  // parse as an object\n  return JSON.parse(`{ ${params} }`);\n};\n\n/**\n * Maps given value to string for query string\n *\n * @param {any} param - The parameter to be stringified.\n * @return {string} - stringified parameter\n */\nconst stringifyParam = (param) => {\n  switch (typeof (param)) {\n    case 'boolean':\n      return param === true ? 'true' : 'false';\n    case 'string':\n      return encodeURIComponent(param);\n    default:\n      return param;\n  }\n};\n\n/**\n * Parses query string parameters and maps them to a URL query string\n *\n * @param {object} params - The parameters to be stringified.\n * @param {string} baseURL - An optional baseURL.\n * @param {string} - stringified url query string\n */\nconst stringify = (params, baseURL = '') => {\n  let query = '';\n  Object.keys(params).forEach((p, i) => {\n    if (i !== 0) query += '&';\n    query += `${p}=${stringifyParam(params[p])}`;\n  });\n  return `${baseURL}?${query}`;\n};\n\nmodule.exports.parse = parse;\n\nmodule.exports.stringify = stringify"],"names":["module","exports","parse","url","params","split","map","param","props","test","isNaN","decodeURIComponent","includes","parseFloat","parseInt","parseParam","join","JSON","stringify","baseURL","query","Object","keys","forEach","p","i","encodeURIComponent"],"mappings":"AAqEAA,OAAOC,QAAQC,eA7CAC,OAETC,GAAUD,EAAIE,MAAM,KAAK,IAAMF,EAAIE,MAAM,KAAK,IAAIA,MAAM,YAE5DD,EAASA,EAAOE,aAAKC,OACbC,EAAQD,EAAMF,MAAM,eACfG,EAAM,kBAxBDD,SAEd,eAAeE,KAAKF,GACL,SAAVA,EAEGG,MAAMH,OAIPI,mBAAmBJ,OAHrBA,EAAMK,SAAS,KAAOC,WAAWN,GAASO,SAASP,EAAO,IAkBzCQ,CAAWP,EAAM,KAAO,eAC/CQ,KAAK,KAEDC,KAAKf,WAAWE,SAsCzBJ,OAAOC,QAAQiB,mBAXId,EAAQe,kBAAU,QAC/BC,EAAQ,UACZC,OAAOC,KAAKlB,GAAQmB,iBAASC,EAAGC,GACpB,IAANA,IAASL,GAAS,KACtBA,GAAYI,eAtBQjB,iBACNA,OACT,iBACc,IAAVA,EAAiB,OAAS,YAC9B,gBACImB,mBAAmBnB,kBAEnBA,IAeuBH,EAAOoB,MAE/BL,MAAWC"}